generator client {
  provider = "prisma-client-js"
  output   = "../prisma/generated/client"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum Theme {
  WORK
  LEGEND
}

enum NotificationType {
  NEW_ITEM
  NEW_QUEST
  NEW_MOB
  NEW_ARTICLE
  EDIT_ITEM
  EDIT_QUEST
  EDIT_MOB
  EDIT_ARTICLE
  SYSTEM
}

enum Align {
  GNE
  GN
  GE
  NE
  G
  N
  E
}

enum WeaponStat {
  STR
  DEX
  CON
}

enum WeaponType {
  BLUNT
  PIERCE
  SLASH
}

enum StatModifierType {
  ABILITITY
  ITEM
  POTION
  QUEST
  SKILL
  SPELL
}

enum TagType {
  AREA
  ARTICLE
  CHARACTER
  ITEM
  MOB
  SKILL
  SPELL
  POTION
}

model Account {
  id           Int      @id @default(autoincrement())
  mudId        String?  @map("mud_id")
  createdDate  DateTime @default(now()) @map("created_date")
  modifiedDate DateTime @updatedAt @map("modified_date")
  firstName    String?  @map("first_name")
  lastName     String?  @map("last_name")
  email        String   @unique
  preferences  Json?
  roles        Json?

  AccountNotification  AccountNotification[]
  AccountPassword      AccountPassword[]
  AccountPasswordReset AccountPasswordReset[]
  NetworkBlacklist     NetworkBlacklist[]
  Notification         Notification[]
  Character            Character[]
  Area                 Area[]
  ChangeLog            ChangeLog[]
  CreatedItems         Item[]                 @relation("CreatedItems")
  ModifiedItems        Item[]                 @relation("ModifiedItems")
  CreatedSpells        Spell[]                @relation("CreatedSpells")
  ModifiedSpells       Spell[]                @relation("ModifiedSpells")
  CreatedPotions       Potion[]               @relation("CreatedPotions")
  ModifiedPotions      Potion[]               @relation("ModifiedPotions")
  CreatedSkills        Skill[]                @relation("CreatedSkills")
  ModifiedSkills       Skill[]                @relation("ModifiedSkills")
  CreatedAbilities     Ability[]              @relation("CreatedAbilities")
  ModifiedAbilities    Ability[]              @relation("ModifiedAbilities")
  CreatedQuests        Quest[]                @relation("CreatedQuests")
  ModifiedQuests       Quest[]                @relation("ModifiedQuests")
  AuthorAccount        Article[]              @relation("AuthorAccount")
  EditorAccount        Article[]              @relation("EditorAccount")
  TagAuthor            Tag[]                  @relation("TagAuthor")
  TagEditor            Tag[]                  @relation("TagEditor")
  MobAuthor            Mob[]                  @relation("MobAuthor")
  MobEditor            Mob[]                  @relation("MobEditor")

  @@map("accounts")
}

model AccountNotification {
  id             Int       @id @default(autoincrement())
  accountId      Int       @map("account_id")
  notificationId Int       @map("notification_id")
  read           Boolean?  @default(false)
  readDate       DateTime? @map("read_date")

  Account      Account      @relation(fields: [accountId], references: [id], onDelete: Cascade)
  Notification Notification @relation(fields: [notificationId], references: [id], onDelete: Cascade)

  @@map("account_notifications")
}

model AccountPassword {
  id           Int       @id @default(autoincrement())
  accountId    Int       @map("account_id")
  createdDate  DateTime? @updatedAt @map("created_date")
  passwordHash String    @map("password_hash")

  Account Account @relation(fields: [accountId], references: [id], onDelete: Cascade)

  @@map("account_passwords")
}

model AccountPasswordReset {
  id         Int    @id @default(autoincrement())
  accountId  Int    @map("account_id")
  resetToken String @map("reset_token")

  Account Account @relation(fields: [accountId], references: [id], onDelete: Cascade)

  @@map("account_password_resets")
}

model NetworkHistory {
  id        Int      @id @default(autoincrement())
  accountId Int      @map("account_id")
  loginDate DateTime @default(now()) @map("login_date")
  ipAddress String   @map("ip_address")

  NetworkBlacklist NetworkBlacklist[]

  @@map("network_history")
}

model NetworkBlacklist {
  id               Int      @id @default(autoincrement())
  networkHistoryId Int      @map("network_history_id")
  ipAddress        String   @unique @map("ip_address")
  issueDate        DateTime @map("issue_date")
  termDate         DateTime @map("term_date")
  issuer           Int

  NetworkHistory NetworkHistory @relation(fields: [networkHistoryId], references: [id])
  Account        Account        @relation(fields: [issuer], references: [id])

  @@map("network_blacklist")
}

model Notification {
  id          Int              @id @default(autoincrement())
  createdDate DateTime         @map("created_date")
  createdBy   Int              @map("created_by")
  type        NotificationType
  title       String
  description String?
  content     String?          @db.Text
  tags        Json?

  Account             Account               @relation(fields: [createdBy], references: [id])
  AccountNotification AccountNotification[]

  @@map("notifications")
}

model Character {
  id           Int       @id @default(autoincrement())
  accountId    Int       @map("account_id")
  createdDate  DateTime  @default(now()) @map("created_date")
  modifiedDate DateTime? @updatedAt @map("modified_date")
  name         String
  mudId        Int?      @map("mud_id")
  description  String?
  str          Int?      @default(50)
  min          Int?      @default(50)
  dex          Int?      @default(50)
  con          Int?      @default(16)
  per          Int?      @default(16)
  spi          Int?      @default(16)
  strSwap      Int?      @default(0) @map("str_swap")
  minSwap      Int?      @default(0) @map("min_swap")
  dexSwap      Int?      @default(0) @map("dex_swap")
  conSwap      Int?      @default(0) @map("con_swap")
  perSwap      Int?      @default(0) @map("per_swap")
  spiSwap      Int?      @default(0) @map("spi_swap")
  level        Int?      @default(50)
  equipmentId  Int?      @map("equipment_id")
  version      String?
  hometown     String?
  tags         Json?

  Account            Account              @relation(fields: [accountId], references: [id])
  CharacterQuest     CharacterQuest[]
  CharacterEquipment CharacterEquipment[]

  @@map("characters")
}

model CharacterQuest {
  id          Int @id @default(autoincrement())
  characterId Int @map("character_id")
  questId     Int @map("quest_id")

  Character Character @relation(fields: [characterId], references: [id])
  Quest     Quest     @relation(fields: [questId], references: [id])

  @@map("character_quests")
}

model CharacterEquipment {
  id          Int   @id @default(autoincrement())
  characterId Int   @map("character_id")
  light       Int?
  finger1     Int?  @map("finger_1")
  finger2     Int?  @map("finger_2")
  neck1       Int?  @map("neck_1")
  neck2       Int?  @map("neck_2")
  body        Int?
  head        Int?
  hands       Int?
  feet        Int?
  face        Int?
  arms        Int?
  legs        Int?
  about       Int?
  waist       Int?
  wrist1      Int?  @map("wrist_1")
  wrist2      Int?  @map("wrist_2")
  wield       Int?
  hold1       Int?  @map("hold_1")
  hold2       Int?  @map("hold_2")
  hold3       Int?  @map("hold_3")
  ear1        Int?  @map("ear_1")
  ear2        Int?  @map("ear_2")
  arm         Int?
  amulet      Int?
  aux         Int?
  lockedSlots Json? @map("locked_slots")

  Character Character @relation(fields: [characterId], references: [id])

  @@map("character_equipment")
}

model Item {
  id               Int       @id @default(autoincrement())
  createdDate      DateTime  @default(now()) @map("created_date")
  createdBy        Int       @map("created_by")
  modifiedDate     DateTime? @updatedAt @map("modified_date")
  modifiedBy       Int?      @map("modified_by")
  shortDescription String    @map("short_description")
  longDescription  String?   @map("long_description")
  timer            Int?      @default(-1)
  align            Align?    @default(GNE)
  rent             Int?
  preservable      Boolean?  @default(false)
  netStat          Int?      @map("net_stat")
  notes            String?   @db.Text
  weight           Float?    @default(0.0)
  slots            String?
  isBonded         Boolean?  @default(false) @map("is_bonded")
  isCastable       Boolean?  @default(false) @map("is_castable")
  isHeroic         Boolean?  @default(false) @map("is_heroic")
  isLevelRequired  Boolean?  @default(false) @map("is_level_required")
  isLight          Boolean?  @default(false) @map("is_light")
  isLimited        Boolean?  @default(false) @map("is_limited")
  isSoulbound      Boolean?  @default(false) @map("is_soulbound")
  isUnique         Boolean?  @default(false) @map("is_unique")
  tags             Json?

  ItemSpell     ItemSpell[]
  StatModifier  StatModifier[]
  AmmoItem      ItemWeapon[]   @relation("AmmoItem")
  CreatedItems  Account        @relation("CreatedItems", fields: [createdBy], references: [id])
  ModifiedItems Account?       @relation("ModifiedItems", fields: [modifiedBy], references: [id])
  ItemWeapon    ItemWeapon?

  @@map("items")
}

model ItemWeapon {
  id           Int         @id @default(autoincrement())
  itemId       Int         @unique @map("item_id")
  quality      Int?
  speed        Int?
  isHoldable   Boolean     @default(false) @map("is_holdable")
  isTwoHanded  Boolean     @default(false) @map("is_two_handed")
  ammoCapacity Int?        @map("ammo_capacity")
  ammoTypeId   Int         @map("ammo_type_id")
  shotAccuracy Int?        @map("shot_accuracy")
  maxDamage    Int?        @map("max_damage")
  minDamage    Int?        @map("min_damage")
  avgDamage    Int?        @map("avg_damage")
  stat         WeaponStat?
  type         WeaponType?

  Item     Item @relation(fields: [itemId], references: [id])
  AmmoItem Item @relation("AmmoItem", fields: [ammoTypeId], references: [id])

  @@map("item_weapons")
}

model ItemSpell {
  id      Int @id @default(autoincrement())
  itemId  Int @map("item_id")
  spellId Int @map("spell_id")

  Item  Item  @relation(fields: [itemId], references: [id])
  Spell Spell @relation(fields: [spellId], references: [id])

  @@map("item_spells")
}

model Spell {
  id               Int      @id @default(autoincrement())
  createdDate      DateTime @default(now()) @map("created_date")
  createdBy        Int      @map("created_by")
  modifiedDate     DateTime @updatedAt @map("modified_date")
  modifiedBy       Int      @map("modified_by")
  name             String
  description      String?
  notes            String?  @db.Text
  words            String?
  levelRequirement Int?     @default(0) @map("level_requirement")
  tags             Json?

  ItemSpell      ItemSpell[]
  StatModifier   StatModifier[]
  CreatedSpells  Account        @relation("CreatedSpells", fields: [createdBy], references: [id])
  ModifiedSpells Account        @relation("ModifiedSpells", fields: [modifiedBy], references: [id])

  @@map("spells")
}

model Potion {
  id           Int      @id @default(autoincrement())
  createdDate  DateTime @default(now()) @map("created_date")
  createdBy    Int      @map("created_by")
  modifiedDate DateTime @updatedAt @map("modified_date")
  modifiedBy   Int      @map("modified_by")
  name         String
  description  String?
  notes        String?  @db.Text
  duration     Int?
  tags         Json?

  StatModifier    StatModifier[]
  CreatedPotions  Account        @relation("CreatedPotions", fields: [createdBy], references: [id])
  ModifiedPotions Account        @relation("ModifiedPotions", fields: [modifiedBy], references: [id])

  @@map("potions")
}

model Skill {
  id               Int      @id @default(autoincrement())
  createdDate      DateTime @default(now()) @map("created_date")
  createdBy        Int      @map("created_by")
  modifiedDate     DateTime @updatedAt @map("modified_date")
  modifiedBy       Int      @map("modified_by")
  name             String
  description      String?
  notes            String?  @db.Text
  trainable        Boolean?
  levelRequirement Int      @map("level_requirement")
  tags             Json?

  StatModifier   StatModifier[]
  CreatedSkills  Account        @relation("CreatedSkills", fields: [createdBy], references: [id])
  ModifiedSkills Account        @relation("ModifiedSkills", fields: [modifiedBy], references: [id])

  @@map("skills")
}

model Ability {
  id           Int       @id @default(autoincrement())
  createdDate  DateTime  @default(now()) @map("created_date")
  createdBy    Int       @map("created_by")
  modifiedDate DateTime? @updatedAt @map("modified_date")
  modifiedBy   Int?      @map("modified_by")
  name         String
  description  String?
  notes        String?   @db.Text
  tiers        Json?     @default("[{}]")
  tags         Json?

  StatModifier      StatModifier[]
  CreatedAbilities  Account        @relation("CreatedAbilities", fields: [createdBy], references: [id])
  ModifiedAbilities Account?       @relation("ModifiedAbilities", fields: [modifiedBy], references: [id])

  @@map("abilities")
}

model Quest {
  id           Int       @id @default(autoincrement())
  createdDate  DateTime  @default(now()) @map("created_date")
  createdBy    Int       @map("created_by")
  modifiedDate DateTime? @updatedAt @map("modified_date")
  modifiedBy   Int?      @map("modified_by")
  name         String
  description  String?
  notes        String?   @db.Text
  whoises      Json?     @default("[{}]")
  experience   Int?
  tags         Json?

  CharacterQuest CharacterQuest[]
  StatModifier   StatModifier[]
  CreatedQuests  Account          @relation("CreatedQuests", fields: [createdBy], references: [id])
  ModifiedQuests Account?         @relation("ModifiedQuests", fields: [modifiedBy], references: [id])

  @@map("quests")
}

model StatModifier {
  id        Int  @id @default(autoincrement())
  statId    Int  @map("stat_id")
  itemId    Int? @map("item_id")
  abilityId Int? @map("ability_id")
  questId   Int? @map("quest_id")
  skillId   Int? @map("skill_id")
  spellId   Int? @map("spell_id")
  potionId  Int? @map("potion_id")

  Item    Item?    @relation(fields: [itemId], references: [id], onDelete: Cascade)
  Ability Ability? @relation(fields: [abilityId], references: [id], onDelete: Cascade)
  Quest   Quest?   @relation(fields: [questId], references: [id], onDelete: Cascade)
  Skill   Skill?   @relation(fields: [skillId], references: [id], onDelete: Cascade)
  Spell   Spell?   @relation(fields: [spellId], references: [id], onDelete: Cascade)
  Potion  Potion?  @relation(fields: [potionId], references: [id], onDelete: Cascade)
  Stat    Stat     @relation(fields: [statId], references: [id])

  @@map("stat_modifiers")
}

model Stat {
  id            Int            @id @default(autoincrement())
  hp            Int?
  mv            Int?
  ma            Int?
  ac            Int?
  str           Int?
  min           Int?
  dex           Int?
  con           Int?
  per           Int?
  spi           Int?
  hpRegen       Int?           @map("hp_regen")
  mvRegen       Int?           @map("mv_regen")
  maRegen       Int?           @map("ma_regen")
  damroll       Int?
  hitroll       Int?
  mitigation    Int?
  spellDam      Int?           @map("spell_dam")
  spellCrit     Int?           @map("spell_crit")
  spellRedux    Int?           @map("spell_redux")
  concentration Int?
  shotAccuracy  Int?           @map("shot_accuracy")
  bonusAccuracy Int?           @map("bonus_accuracy")
  ammoCapacity  Int?           @map("ammo_capacity")
  parry         Int?
  strCap        Int?           @map("str_cap")
  minCap        Int?           @map("min_cap")
  dexCap        Int?           @map("dex_cap")
  conCap        Int?           @map("con_cap")
  perCap        Int?           @map("per_cap")
  spiCap        Int?           @map("spi_cap")
  StatModifier  StatModifier[]

  @@map("stats")
}

model Article {
  id           Int      @id @default(autoincrement())
  createdDate  DateTime @default(now()) @map("created_date")
  modifiedDate DateTime @default(now()) @map("modified_date")
  authorId     Int      @map("author_id")
  editorId     Int      @map("editor_id")
  content      String   @db.Text
  isProtected  Boolean  @default(false) @map("is_protected")
  isCurrent    Boolean  @map("is_current")
  version      String?
  tags         Json?

  AuthorAccount Account @relation("AuthorAccount", fields: [authorId], references: [id])
  EditorAccount Account @relation("EditorAccount", fields: [editorId], references: [id])

  @@map("articles")
}

model Tag {
  id           Int       @id @default(autoincrement())
  createdBy    Int       @map("created_by")
  createdDate  DateTime  @default(now()) @map("created_date")
  modifiedDate DateTime? @updatedAt @map("modified_date")
  modifiedBy   Int?      @map("modified_by")
  tag          String

  TagAuthor Account  @relation("TagAuthor", fields: [createdBy], references: [id])
  TagEditor Account? @relation("TagEditor", fields: [modifiedBy], references: [id])

  @@map("tags")
}

model Mob {
  id               Int       @id @default(autoincrement())
  createdBy        Int       @map("created_by")
  createdDate      DateTime  @default(now()) @map("created_date")
  modifiedDate     DateTime? @updatedAt @map("modified_date")
  modifiedBy       Int?      @map("modified_by")
  mudId            Int?      @map("mud_id")
  areaId           Int?      @map("area_id")
  shortDescription String    @map("short_description")
  longDescription  String?   @map("long_description")
  level            Int?
  isAggressive     Boolean   @default(false) @map("is_aggressive")
  experience       Int?
  gold             Int?
  tags             Json?

  Area      Area?    @relation(fields: [areaId], references: [id])
  MobAuthor Account  @relation("MobAuthor", fields: [createdBy], references: [id])
  MobEditor Account? @relation("MobEditor", fields: [modifiedBy], references: [id])

  @@map("mobs")
}

model Area {
  id          Int       @id @default(autoincrement())
  mudId       Int?      @map("mud_id")
  name        String
  authorId    Int?      @map("author_id")
  releaseDate DateTime? @map("release_date")
  tags        Json?

  Mob    Mob[]
  Author Account? @relation(fields: [authorId], references: [id])

  @@map("areas")
}

model ChangeLog {
  id          Int       @id @default(autoincrement())
  createdDate DateTime  @map("created_date")
  createdBy   Int       @map("created_by")
  content     String?   @db.Text
  version     String?
  releaseDate DateTime? @map("release_date")

  Creator Account? @relation(fields: [createdBy], references: [id])

  @@map("change_logs")
}
